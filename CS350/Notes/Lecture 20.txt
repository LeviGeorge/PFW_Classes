Implementing Subprograms

The format, or layout of the non-code part of an executing subprogram
is called an activation record.
-This is only relevant during activation/execution

An acitvation record instance is dynamically created 

...

Activation record
*Local Variables - Placed 4th
*Parameters - Placed 3rd
*Dynamic Link  - Placed 1st
*Return Address - Placed 2nd

Return Address points to the next instruction after the call point.

The dynamic link points to the base of the activation record caller.
-Static scope: used to trace back info in the case of run-time errors
-Dynamic Scope: used to access non-local Variables

**Remember This?**

Static Scope is structure based

Dynamic is execution/call based

**

Return Address, Dynamic link, and parameters are placed by caller.
Local variables allocated and initialized by the calling subprogram, placed after.

**Illicit Learning**
Exception Handling will search for a handler for a given error within the subprogram that the error occurred if given the chance
Without it, it will move the next step up, to the parent subprogram. It essentially goes up the call stack, till it reaches main.
If no handler exists, the program crashes

**

The Compiler must generate code for implicit allocation and deallocation of local variables.

Once created, they may be accessed through their offset from the beginning of the activation record
-The environment pointer must be maintained by the run-time system
-It will always point to the bottom of the activation record instance of the currently executing program unit

..

Semantic Call Actions

Caller Actions
-Create an activation record instance
-Save the execution status of the current unit
-Compute and pass the parameters
-Pass the return address to the called function
-Transfer control to the called

Prologue
- Save the old EP as the dynamic link in the record
- Set to point to the base of the record
